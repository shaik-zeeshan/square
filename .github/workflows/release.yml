name: Build and Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  # Check if commit message contains "release" keyword
  check-release:
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.check.outputs.is-release }}
    steps:
      - name: Check for release commit
        id: check
        run: |
          if echo "${{ github.event.head_commit.message }}" | grep -qi "release"; then
            echo "is-release=true" >> $GITHUB_OUTPUT
            echo "🚀 Release commit detected!"
          else
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "📝 Regular commit detected"
          fi

  # Build for macOS
  build-macos:
    needs: check-release
    if: needs.check-release.outputs.is-release == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/index
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
            ${{ runner.os }}-cargo-

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install system dependencies
        run: |
          # Install Homebrew dependencies
          brew install git pkg-config cmake nasm yasm autoconf automake libtool meson ninja curl

      - name: Install Bun dependencies
        run: bun install

      - name: Build application
        run: make ci-build
        env:
          CI: false

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: sreal-macos-dmg
          path: src-tauri/target/release/bundle/dmg/sreal_*_aarch64.dmg
          retention-days: 30



  # Create GitHub Release
  create-release:
    needs: [check-release, build-macos]
    if: needs.check-release.outputs.is-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' src-tauri/Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts

      - name: Generate Changelog
        run: |
          # Install conventional changelog
          npm install -g conventional-changelog-cli
          
          # Generate changelog from commits
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
          # Show the generated changelog
          cat CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            artifacts/sreal_*_aarch64.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

