name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Check if commit message contains "release" keyword
  check-release:
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.check.outputs.is-release }}
    steps:
      - name: Check for release commit
        id: check
        run: |
          if echo "${{ github.event.head_commit.message }}" | grep -qi "release"; then
            echo "is-release=true" >> $GITHUB_OUTPUT
            echo "üöÄ Release commit detected!"
          else
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "üìù Regular commit detected"
          fi

  # Lint and format check
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest

  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: rustfmt, clippy

  #     - name: Cache Rust dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           src-tauri/target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-

  #     - name: Cache Bun dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-bun-

  #     - name: Install Bun dependencies
  #       run: bun install

  #     - name: Run Biome linting
  #       run: bun run biome check src/

  #     - name: Check Rust formatting
  #       run: cargo fmt --all -- --check
  #       working-directory: src-tauri

  #     - name: Run Clippy
  #       run: cargo clippy --all-targets --all-features -- -D warnings
  #       working-directory: src-tauri

  # Test frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Bun dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

  # Test Rust backend
  test-rust:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libmpv-dev \
            pkg-config \
            libssl-dev \
            libasound2-dev \
            libx11-dev \
            libxext-dev \
            libxrender-dev \
            libxrandr-dev \
            libxss-dev \
            libnss3-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxfixes-dev \
            libxi-dev \
            libxtst-dev \
            libatspi2.0-dev \
            libdrm-dev \
            libxkbcommon-dev \
            libgtk-3-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Test Rust code
        run: |
          cd src-tauri
          cargo test

  # Build test (without release)
  build-test:
    needs: [check-release]
    if: needs.check-release.outputs.is-release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libmpv-dev \
            pkg-config \
            libssl-dev \
            libasound2-dev \
            libx11-dev \
            libxext-dev \
            libxrender-dev \
            libxrandr-dev \
            libxss-dev \
            libnss3-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxfixes-dev \
            libxi-dev \
            libxtst-dev \
            libatspi2.0-dev \
            libdrm-dev \
            libxkbcommon-dev \
            libgtk-3-dev

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Bun dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Build Tauri app (test)
        run: bun run tauri build
