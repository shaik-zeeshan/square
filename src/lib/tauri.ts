// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands */

export const commands = {
  async playbackPlay(): Promise<void> {
    await TAURI_INVOKE('playback_play');
  },
  async playbackPause(): Promise<void> {
    await TAURI_INVOKE('playback_pause');
  },
  async playbackSeek(time: number): Promise<void> {
    await TAURI_INVOKE('playback_seek', { time });
  },
  async playbackVolume(volume: number): Promise<void> {
    await TAURI_INVOKE('playback_volume', { volume });
  },
  async playbackSpeed(speed: number): Promise<void> {
    await TAURI_INVOKE('playback_speed', { speed });
  },
  async playbackLoad(url: string): Promise<void> {
    await TAURI_INVOKE('playback_load', { url });
  },
  async playbackChangeSubtitle(subtitle: string): Promise<void> {
    await TAURI_INVOKE('playback_change_subtitle', { subtitle });
  },
  async playbackChangeAudio(audio: string): Promise<void> {
    await TAURI_INVOKE('playback_change_audio', { audio });
  },
  async playbackClear(): Promise<void> {
    await TAURI_INVOKE('playback_clear');
  },
  async toggleTitlebarHide(hide: boolean): Promise<null> {
    return await TAURI_INVOKE('toggle_titlebar_hide', { hide });
  },
  async toggleFullscreen(): Promise<null> {
    return await TAURI_INVOKE('toggle_fullscreen');
  },
};

/** user-defined events */

/** user-defined constants */

/** user-defined types */

export type GeneralSettings = {
  volume: number;
  playbackSpeed: number;
  subtitleLanguage: string | null;
  audioLanguage: string | null;
  autoPlayNext: boolean;
  resumePlayback: boolean;
};

/** tauri-specta globals */

import { invoke as TAURI_INVOKE } from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';
import type { WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow';

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: 'ok'; data: T }
  | { status: 'error'; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> &
        ((handle: __WebviewWindow__) => __EventObj__<T[K]>);
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case 'listen':
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case 'once':
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case 'emit':
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}
